#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <algorithm>
using namespace std;

struct row//заголовок строки таблицы 4 шага. Содержит для облегчения дальнейших шагов позиции символа
{
    string symbol; //символ регулярного выражения
    vector <int> place; //позиции символа в регулярном выражении 
};

void read_file(string& st, string name);
void markdown(vector <vector <int>>& delimiter, string str, int begin, int end, int& count, vector<row>& r);
void dop(vector <vector <int>>& delimiter, string str, int begin, int end);
void automaton(vector<vector<vector <int>>>& cell, vector<row>rOfTable, vector<vector <int>>& cOfTable, vector <vector <int>> delimiter, vector<bool>& correct);
void write_to_file(vector<vector<vector <int>>> cell, vector<row>rOfTable, vector<vector <int>>cOfTable, vector<bool>correctly);
int closing_bracket(string str, int begin);
int find(vector<row> r, char s[1]);

int main()
{
    setlocale(LC_ALL, "rus");
    string str;
    //считывает содержимое файла в строку
    read_file(str, "input.txt");
    vector <vector <int>> delimiter(str.size() + 1, vector<int>());
    int count = 1;
    vector<row>rOfTable;//заголовки строк таблицы
    vector<bool>correct;
    vector<vector <int>>cOfTable;//заголовки столбцов таблицы
    cOfTable.push_back(vector < int > {0});
    correct.push_back(false);

    // Запуск алгоритма разбиения на дизъюнктивные члены и построения конечного автомата
    markdown(delimiter, str, 0, str.size(), count, rOfTable);
    vector<vector<vector <int>>> cell(rOfTable.size(), vector<vector <int>>());//первый вектор-строка, второй-столбец, третий - ячейка
    automaton(cell, rOfTable, cOfTable, delimiter, correct);

    // Запись результатов в файл
    write_to_file(cell, rOfTable, cOfTable, correct);
    system("pause");
    return 0;
}

// Функция записи результатов в файл
void write_to_file(vector<vector<vector <int>>> cell, vector<row>rOfTable, vector<vector <int>>cOfTable, vector<bool>correct)
{
    ofstream file("result.txt");
    vector<vector<int>>::iterator it;

    // Запись заголовков столбцов
    for (int i = 0; i < cOfTable.size(); i++)
    {
        file << '\t' << i;
    }

    // Запись таблицы переходов в файл
    for (int i = 0; i < rOfTable.size(); i++)
    {
        file << '\n' << rOfTable[i].symbol << '\t';
        for (int j = 0; j < cOfTable.size(); j++)
        {
            if (cell[i][j].empty())
                file << "-\t";
            else
            {
                // Поиск позиции в заголовке столбца
                it = find(cOfTable.begin(), cOfTable.end(), cell[i][j]);
                file << it - cOfTable.begin() << '/';
                if (correct[it - cOfTable.begin()] == true)
                    file << '1';
                else
                    file << '0';
                file << '\t';
            }
        }
    }
    file.close();
}

// Функция построения конечного автомата
void automaton(vector<vector<vector <int>>>& cell, vector<row>rOfTable, vector<vector <int>>& cOfTable, vector <vector <int>> delimiter, vector<bool>& correct)
{
    int column = 0;
    // Перебор столбцов 
    while (column < cOfTable.size())
    {
        // Проверка, является ли состояние конечным
        for (int i = 0; i < cOfTable[column].size(); i++)//состояние является конечным?
        {
            for (int j = 0; j < delimiter[delimiter.size() - 1].size(); j++)
            {
                if (cOfTable[column][i] == delimiter[delimiter.size() - 1][j])
                {
                    correct[column] = true;
                    break;
                }
            }
            if (correct[column] == true)
                break;
        }

        // Построение таблицы переходов для каждой строки
        // Создание ячеек в таблице автомата
        for (int i = 0; i < rOfTable.size(); i++)//каждая строка
        {
            cell[i].push_back(vector<int>());
            //для каждого вхождения символа во входную строку
            for (int j = 0; j < rOfTable[i].place.size(); j++)
            {
                //дл€ каждой позиции в заголовке столбца
                for (int k = 0; k < cOfTable[column].size(); k++)
                {
                    if (find(delimiter[rOfTable[i].place[j]].begin()/*предосновное место этого символа i в месте j*/, delimiter[rOfTable[i].place[j]].end(), cOfTable[column][k]) != delimiter[rOfTable[i].place[j]].end()
                        //в этом предосновном месте найдена позиция из заголовка столбца
                        && find(cell[i][column].begin(), cell[i][column].end(), delimiter[rOfTable[i].place[j] + 1][0]) == cell[i][column].end())
                        //и позиции основного места нет в ячейки
                        cell[i][column].push_back(delimiter[rOfTable[i].place[j] + 1][0]); //значит добавляем позицию основного места в ячейку
                }
            }
            // Сортировка ячейки
            sort(cell[i][column].begin(), cell[i][column].end());

            // Проверка наличия нового заголовка в таблице
            // Если заголовка нет в таблице, добавляем его
            if (find(cOfTable.begin(), cOfTable.end(), cell[i][column]) == cOfTable.end() && !cell[i][column].empty())//если такого заголовка нет
            {
                cOfTable.push_back(cell[i][column]);//добавляем
                correct.push_back(false);
            }
        }
        column++;
    }
}

//строит таблицу разделителей, которая содержит информацию о позициях символов и их отношениях.
void markdown(vector <vector <int>>& delimiter, string str, int begin, int end, int& count, vector<row>& r)// count = 1
{
    vector<int>dMemberB;
    vector<int>dMemberE;
    int check;
    for (int i = begin; i < end; i++)
    {
        if (i == begin)
        {
            // Начальная обработка символа в регулярном выражении
            if (i == 0)
            {
                delimiter[0].push_back(0);
                // Если первый символ не является одной из скобок
                if (str[0] != '<' && str[0] != '>' && str[0] != '(' && str[0] != ')')
                    dMemberB.push_back(0);
            }
            else
            {
                // Копируем предыдущие разделители в новый блок
                for (int j = 0; j < delimiter[i - 1].size(); j++)
                    delimiter[i].push_back(delimiter[i - 1][j]);
                dMemberB.push_back(i);//начальные места дизъюнктивных членов
            }
        }
        if (str[i] != '<' && str[i] != '>' && str[i] != '(' && str[i] != ')' && str[i] != '|')//отмечаю основные места
        {
            // Отмечаем основные места
            check = find(r, &str[i]);
            if (check == -1)
                r.push_back(row{ { str[i] },{ i } });
            else
                r[check].place.push_back(i);
            delimiter[i + 1].push_back(count);
            count++;
        }
        if (i > 0)
        {
            if (str[i] != '>' && str[i] != ')' && str[i] != '|' && str[i - 1] == '|')
                //Индекс места перед любыми скобками распростран€етс€ на начальные места
                //всех дизъюнктивных членов, записанных в этих скобках
            {
                if (begin == 0)
                {
                    for (int j = 0; j < delimiter[begin].size(); j++)
                        delimiter[i].push_back(delimiter[begin][j]);
                }
                else
                {
                    for (int j = 0; j < delimiter[begin - 1].size(); j++)
                        delimiter[i].push_back(delimiter[begin - 1][j]);
                }
                dMemberB.push_back(i);//начальные места дизъюнктивных членов
                dMemberE.push_back(i - 1);
            }
        }
        if (i == end - 1)
        {
            if (str[end - 1] == ')' || str[end - 1] == '>')
                //отмечаю конец последнего диз члена в скобках
                dMemberE.push_back(end - 1);
            for (int j = 0; j < dMemberE.size(); j++)
                //Индекс конечного места любого дизъюнктивного члена, заключенного в любые скобки,
                //распространяется на место, непосредственно следующее за этими скобками.
            {
                for (int k = 0; k < delimiter[dMemberE[j]].size(); k++)
                    delimiter[end].push_back(delimiter[dMemberE[j]][k]);
            }
            if (str[end - 1] == '>')
            {
                for (int j = 0; j < delimiter[begin - 1].size(); j++)
                    //индекс места перед итерационными скобками распространяется на место,
                    //непосредственно следующее за этими скобками
                    if (find(delimiter[end].begin(), delimiter[end].end(), delimiter[begin - 1][j]) == delimiter[end].end())
                        delimiter[end].push_back(delimiter[begin - 1][j]);
                for (int j = 0; j < dMemberB.size(); j++)
                    //индекс места за итерационными скобками распространяется 
                    //на начальные места всех дизъюнктивных членов, заключенных в итерационные скобки
                {
                    for (int k = 0; k < delimiter[end].size(); k++)
                    {
                        if (find(delimiter[dMemberB[j]].begin(), delimiter[dMemberB[j]].end(), delimiter[end][k]) == delimiter[dMemberB[j]].end())
                            delimiter[dMemberB[j]].push_back(delimiter[end][k]);
                    }
                    // Если символ в начальной позиции - открывающая скобка, значит,
                    // надо добавить на начальные места дизъюнктивных членов новые индексы
                    if (str[dMemberB[j]] == '<' || str[dMemberB[j]] == '(')//значит надо добавить на начальные места диз членов новые индексы
                    {
                        dop(delimiter, str, dMemberB[j] + 1, closing_bracket(str, dMemberB[j]));
                    }
                }
            }
        }
        // Обработка скобок
        if (str[i] == '<' || str[i] == '(')
        {
            int zSc = closing_bracket(str, i);
            markdown(delimiter, str, i + 1, zSc + 1, count, r);
            i = zSc; // Пропускаем уже обработанный блок
        }
    }
}

void dop(vector <vector <int>>& delimiter, string str, int begin, int end)
{
    // Функция добавления начальных мест дизъюнктивных членов в таблицу разделителей
    for (int i = begin; i < end; i++)
    {
        if (i == begin)
        {
            //добавляем в начальное место, сразу за скобками
            for (int j = 0; j < delimiter[begin - 1].size(); j++)
            {
                if (find(delimiter[begin].begin(), delimiter[begin].end(), delimiter[begin - 1][j]) == delimiter[begin].end())
                    delimiter[begin].push_back(delimiter[begin - 1][j]);
            }
        }
        if (str[i] != '>' && str[i] != ')' && str[i] != '|' && str[i - 1] == '|')// добавляем всем остальным диз членам в скобках
        {
            // Добавляем всем остальным дизъюнктивным членам в скобках
            for (int j = 0; j < delimiter[begin - 1].size(); j++)
            {
                if (find(delimiter[i].begin(), delimiter[i].end(), delimiter[begin - 1][j]) == delimiter[i].end())

                    delimiter[i].push_back(delimiter[begin - 1][j]);
            }
        }
        if ((str[i] == '<' || str[i] == '(') && (str[i - 1] == '|' || str[i - 1] == '(' || str[i - 1] == '<'))
        {
            // Если встречаем открывающую скобку внутри разделителей
            int zSc = closing_bracket(str, i);
            // Рекурсивно вызываем функцию для обработки вложенной скобки
            dop(delimiter, str, i + 1, zSc);
            // Пропускаем уже обработанный блок
            i = zSc;
        }
    }
}

// Функция поиска символа в таблице разделителей
int find(vector<row> r, char s[1])
{
    for (int j = 0; j < r.size(); j++)
    {
        if (s[0] == r[j].symbol[0])
            return j;
    }
    return -1;
}

// Функция разбора скобок
int closing_bracket(string str, int begin)
{
    int count = 1;
    string brackets;
    // Определение типа скобок (<> или ())
    if (str[begin] == '<')
        brackets = "<>";
    else
        brackets = "()";
    // Поиск соответствующей закрывающей скобки
    while (true)
    {
        begin++;
        if (str[begin] == brackets[0])
            count++;
        if (str[begin] == brackets[1])
        {
            count--;
            if (count == 0)
                return begin;// Возвращаем индекс закрывающей скобки
        }
    }
}

void read_file(string& st, string name)
{
    string temporary;
    ifstream file(name);
    if (!file.is_open())
        cout << "Файл не может быть открыт!\n";
    else
    {
        string str;
        getline(file, str);
        if (str.empty()) cout << "Файл пуст!" << endl;
        else

        {
            st = str;
        }
    }
    file.close();
    return;
}

