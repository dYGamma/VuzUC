import numpy as np
import scipy.stats as stats
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import style

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
style.use("seaborn-v0_8-darkgrid")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
st.markdown("""
<h1 style="text-align: center; color: #4CAF50;">
    üìä –ê–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
</h1>
<p style="text-align: center; font-size: 16px; color: #555;">
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
</p>
""", unsafe_allow_html=True)

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
default_data = {
    "x1": [2, 3, 4, 6, 7, -1],
    "x2": [-2, 0, 1, 2, 3, -1],
    "y": [16, 6, 1, -2, -8, 7]
}

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
with st.sidebar:
    st.markdown("""
    <h2 style="color: #FF9800;">üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h2>
    """, unsafe_allow_html=True)
    st.markdown("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è `x1`, `x2` –∏ `y`. –ö–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –∑–∞–ø—è—Ç–æ–π.")
    x1_input = st.text_input("x1 (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value=",".join(map(str, default_data["x1"])))
    x2_input = st.text_input("x2 (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value=",".join(map(str, default_data["x2"])))
    y_input = st.text_input("y (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value=",".join(map(str, default_data["y"])))

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤ –º–∞—Å—Å–∏–≤—ã NumPy
try:
    x1 = np.array(list(map(float, x1_input.split(","))))
    x2 = np.array(list(map(float, x2_input.split(","))))
    y = np.array(list(map(float, y_input.split(","))))

    if len(x1) != len(x2) or len(x1) != len(y):
        st.error("–û—à–∏–±–∫–∞: –î–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–æ–≤ x1, x2 –∏ y –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å!")
        st.stop()

except ValueError:
    st.error("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏!")
    st.stop()

# –ì–ª–∞–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
col1, col2 = st.columns([2, 1])

with col1:
    st.markdown("""
    <h3 style="color: #2196F3;">üìã –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ</h3>
    """, unsafe_allow_html=True)
    data = pd.DataFrame({"x1": x1, "x2": x2, "y": y})
    st.dataframe(data.style.highlight_max(axis=0, color="#876c99"))

with col2:
    st.markdown("""
    <h3 style="color: #9C27B0;">üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</h3>
    """, unsafe_allow_html=True)
    stats_data = pd.DataFrame({
        "–ü–∞—Ä–∞–º–µ—Ç—Ä": ["–°—Ä–µ–¥–Ω–µ–µ", "–ú–∏–Ω–∏–º—É–º", "–ú–∞–∫—Å–∏–º—É–º"],
        "x1": [np.mean(x1), np.min(x1), np.max(x1)],
        "x2": [np.mean(x2), np.min(x2), np.max(x2)],
        "y": [np.mean(y), np.min(y), np.max(y)]
    })

    styled_stats_data = stats_data.style.format({
        "x1": "{:.2f}",
        "x2": "{:.2f}",
        "y": "{:.2f}"
    }).set_table_styles([
        {"selector": "th", "props": [("background-color", "#E3F2FD"), ("color", "#333")]}
    ])

    st.dataframe(styled_stats_data)

# –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
mean_x1 = np.mean(x1)
mean_x2 = np.mean(x2)
x1_centered = x1 - mean_x1
x2_centered = x2 - mean_x2

st.markdown("""
<hr style="border: 1px solid #ddd;">
<h3 style="color: #F44336;">üéØ –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã</h3>
""", unsafe_allow_html=True)
centered_data = pd.DataFrame({"x1_centered": x1_centered, "x2_centered": x2_centered})
st.dataframe(centered_data.style.bar(color="#FF9800"))

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
n = len(y)
X = np.column_stack((np.ones(n), x1_centered, x2_centered))
k = 2  # —á–∏—Å–ª–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤

XtX = X.T @ X
XtX_inv = np.linalg.inv(XtX)
beta_hat = XtX_inv @ (X.T @ y)

st.markdown("""
<hr style="border: 1px solid #ddd;">
<h3 style="color: #03A9F4;">üìà –û—Ü–µ–Ω–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏</h3>
""", unsafe_allow_html=True)
coefficients = pd.DataFrame({
    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": ["beta0 (–∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç)", "beta1", "beta2"],
    "–ó–Ω–∞—á–µ–Ω–∏–µ": beta_hat
})

styled_coefficients = coefficients.style.map(
    lambda x: "background-color: #C8E6C9; color: #333;" if isinstance(x, (int, float)) and abs(x) > 1 else "",
    subset=["–ó–Ω–∞—á–µ–Ω–∏–µ"]
)

st.dataframe(styled_coefficients)

# –£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
equation = f"y = {beta_hat[0]:.4f} + {beta_hat[1]:.4f}*(x1 - {mean_x1:.4f}) + {beta_hat[2]:.4f}*(x2 - {mean_x2:.4f})"
st.markdown(f"<h4 style='color: #795548;'>üìù –£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:</h4><p style='font-size: 18px; color: #555;'>{equation}</p>", unsafe_allow_html=True)

# –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
st.markdown("""
<hr style="border: 1px solid #ddd;">
<h3 style="color: #673AB7;">üìâ –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</h3>
""", unsafe_allow_html=True)
y_pred = X @ beta_hat
fig, ax = plt.subplots(figsize=(10, 5))
ax.scatter(range(len(y)), y, label="–ù–∞–±–ª—é–¥–µ–Ω–∏—è", color="#2196F3", s=100)
ax.plot(range(len(y)), y_pred, label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", color="#FF9800", linestyle="--", linewidth=3)
ax.set_xlabel("–ù–æ–º–µ—Ä –Ω–∞–±–ª—é–¥–µ–Ω–∏—è", fontsize=14)
ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ y", fontsize=14)
ax.legend(fontsize=12)
ax.grid(True, linestyle="--", alpha=0.7)
st.pyplot(fig)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
st.markdown("""
<hr style="border: 1px solid #ddd;">
<h3 style="color: #FF5722;">üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏</h3>
""", unsafe_allow_html=True)
residuals = y - y_pred
RSS = np.sum(residuals**2)
TSS = np.sum((y - np.mean(y))**2)
ESS = TSS - RSS
df_reg = k
df_error = n - (k + 1)
MSE = RSS / df_error
F_stat = (ESS / df_reg) / MSE
alpha = 0.05
F_crit = stats.f.ppf(1 - alpha, df_reg, df_error)

fisher_results = pd.DataFrame({
    "–ü–∞—Ä–∞–º–µ—Ç—Ä": ["RSS", "TSS", "ESS", "–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–∏", "–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã –æ—à–∏–±–æ–∫", "MSE", "F —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ F"],
    "–ó–Ω–∞—á–µ–Ω–∏–µ": [RSS, TSS, ESS, df_reg, df_error, MSE, F_stat, F_crit]
})

styled_fisher_results = fisher_results.style.format({
    "–ó–Ω–∞—á–µ–Ω–∏–µ": "{:.4f}"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü
}).set_table_styles([
    {"selector": "th", "props": [("background-color", "#FFF3E0"), ("color", "#333")]}
])

st.dataframe(styled_fisher_results)

if F_stat > F_crit:
    st.success("‚úÖ –ú–æ–¥–µ–ª—å –∞–¥–µ–∫–≤–∞—Ç–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ Œ± = 0.05")
else:
    st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ Œ± = 0.05")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
st.markdown("""
<hr style="border: 1px solid #ddd;">
<h3 style="color: #00BCD4;">üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤</h3>
""", unsafe_allow_html=True)

SE_beta = np.sqrt(np.diag(MSE * XtX_inv))
t_stats = beta_hat / SE_beta
p_values = [2 * (1 - stats.t.cdf(np.abs(t), df=df_error)) for t in t_stats]

student_results = pd.DataFrame({
    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": ["beta0 (–∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç)", "beta1", "beta2"],
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞": SE_beta,
    "t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": t_stats,
    "p-value": p_values
})

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫ —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
styled_student_results = (
    student_results.style
    .format({
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞": "{:.4f}",
        "t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "{:.4f}",
        "p-value": "{:.4f}"
    })
    .map(
        lambda x: "background-color: #FFEBEE; color: #D32F2F;" 
                  if isinstance(x, (int, float)) and x > 0.05 else "",
        subset=["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", "t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "p-value"]  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫ —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
    )
)

st.dataframe(styled_student_results)

insignificant = []
for i, p in enumerate(p_values):
    if p > alpha and i > 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç
        insignificant.append(i)

if insignificant:
    st.warning(f"‚ö†Ô∏è –ù–µ–∑–Ω–∞—á–∏–º—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–∏–Ω–¥–µ–∫—Å—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤): {insignificant}")
else:
    st.success("‚úÖ –í—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∑–Ω–∞—á–∏–º—ã. –°–µ–ª–µ–∫—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

# –°–µ–ª–µ–∫—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤
if insignificant:
    cols = [0] + [i for i in range(1, len(beta_hat)) if i not in insignificant]
    X_new = X[:, cols]
    XtX_new = X_new.T @ X_new
    XtX_inv_new = np.linalg.inv(XtX_new)
    beta_hat_new = XtX_inv_new @ (X_new.T @ y)

    st.subheader("–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–∑–Ω–∞—á–∏–º—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
    new_coefficients = pd.DataFrame({
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": [f"beta{i}" for i in cols],
        "–ó–Ω–∞—á–µ–Ω–∏–µ": beta_hat_new
    })
    st.dataframe(new_coefficients)

    y_pred_new = X_new @ beta_hat_new
    residuals_new = y - y_pred_new
    RSS_new = np.sum(residuals_new**2)
    df_error_new = n - X_new.shape[1]
    MSE_new = RSS_new / df_error_new
    TSS_new = np.sum((y - np.mean(y))**2)
    ESS_new = TSS_new - RSS_new
    df_reg_new = X_new.shape[1] - 1
    F_stat_new = (ESS_new / df_reg_new) / MSE_new if df_reg_new > 0 else np.nan
    F_crit_new = stats.f.ppf(1 - alpha, df_reg_new, df_error_new) if df_reg_new > 0 else np.nan

    fisher_results_new = pd.DataFrame({
        "–ü–∞—Ä–∞–º–µ—Ç—Ä": ["RSS", "TSS", "ESS", "–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–∏", "–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã –æ—à–∏–±–æ–∫", "MSE", "F —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ F"],
        "–ó–Ω–∞—á–µ–Ω–∏–µ": [RSS_new, TSS_new, ESS_new, df_reg_new, df_error_new, MSE_new, F_stat_new, F_crit_new]
    })
    st.dataframe(fisher_results_new)

    if F_stat_new > F_crit_new:
        st.success("‚úÖ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –∞–¥–µ–∫–≤–∞—Ç–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ Œ± = 0.05")
    else:
        st.error("‚ùå –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ Œ± = 0.05")